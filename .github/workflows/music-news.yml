name: Music News Automation with Claude AI

#on:
#  schedule:
#    - cron: '0 1 * * *'  # 매일 한국시간 오전 10시 (UTC 오전 1시)
workflow_dispatch: # 수동 실행 가능

jobs:
  run-music-news:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Verify required files
      run: |
        echo "📁 Checking required files..."
        required_files=(
          "music_news_automation.py" 
          "advanced_news_collector.py" 
          "advanced_classifier.py" 
          "ai_summarizer.py"
          "news_delivery_system.py" 
          "json_generator.py" 
          "requirements.txt"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file found"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        echo "✅ All required files found"
    
    - name: Install dependencies
      run: |
        echo "📦 Installing Python packages..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Dependencies installed successfully"
    
    - name: Test Python imports
      run: |
        echo "🔍 Testing Python module imports..."
        python -c "
        try:
            print('Testing advanced_news_collector...')
            from advanced_news_collector import AdvancedNewsCollector
            print('✅ advanced_news_collector imported')
            
            print('Testing ai_summarizer...')
            from ai_summarizer import AISummarizer
            print('✅ ai_summarizer imported')
            
            print('Testing advanced_classifier...')
            from advanced_classifier import AdvancedClassifier
            print('✅ advanced_classifier imported')
            
            print('Testing news_delivery_system...')
            from news_delivery_system import NewsDeliverySystem
            print('✅ news_delivery_system imported')
            
            print('Testing json_generator...')
            from json_generator import MusicNewsJSONGenerator
            print('✅ json_generator imported')
            
            print('Testing music_news_automation main function...')
            from music_news_automation import main
            print('✅ music_news_automation main function imported')
            
            print('🎉 All imports successful!')
            
        except Exception as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
    
    - name: Test Claude API connection
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "🤖 Testing Claude API connection..."
        
        python -c "
        import os
        import sys
        
        try:
            from ai_summarizer import AISummarizer
            
            # API 키 확인
            api_key = os.environ.get('ANTHROPIC_API_KEY')
            if not api_key:
                print('❌ ANTHROPIC_API_KEY not found')
                sys.exit(1)
            
            print(f'✅ API key found (length: {len(api_key)})')
            
            # AI 요약기 초기화 테스트
            summarizer = AISummarizer()
            print('✅ AI summarizer initialized successfully')
            
            # 간단한 테스트 요약
            test_summary = summarizer.generate_summary(
                'Test Music News', 
                'This is a test description for music news.',
                'https://example.com'
            )
            print(f'✅ Test summary generated: {test_summary[:50]}...')
            print('🎉 Claude API connection successful!')
            
        except Exception as e:
            print(f'❌ Claude API test failed: {e}')
            print('💡 Will fall back to rule-based summaries')
            # AI 실패 시에도 계속 진행
        " || echo "⚠️ Claude API test failed, continuing with fallback"
    
    - name: Verify environment variables
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
        GMAIL_USER: ${{ secrets.EMAIL_ADDRESS }}
        GMAIL_APP_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.EMAIL_ADDRESS }}
      run: |
        echo "🔐 Verifying environment variables..."
        
        # Claude API 키 확인
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "⚠️  ANTHROPIC_API_KEY not set"
          echo "💡 Please add ANTHROPIC_API_KEY to GitHub Secrets"
          echo "🔄 Will use rule-based summaries instead"
        else
          echo "✅ ANTHROPIC_API_KEY is set (length: ${#ANTHROPIC_API_KEY})"
        fi
        
        # Slack 토큰 확인
        if [ -z "$SLACK_BOT_TOKEN" ]; then
          echo "❌ SLACK_BOT_TOKEN not set"
          echo "💡 Please add SLACK_TOKEN to GitHub Secrets"
          exit 1
        else
          echo "✅ SLACK_BOT_TOKEN is set (length: ${#SLACK_BOT_TOKEN})"
        fi
        
        # Gmail 설정 확인
        if [ -z "$GMAIL_USER" ]; then
          echo "❌ GMAIL_USER not set"
          echo "💡 Please add EMAIL_ADDRESS to GitHub Secrets"
          exit 1
        else
          echo "✅ GMAIL_USER is set: $GMAIL_USER"
        fi
        
        if [ -z "$GMAIL_APP_PASSWORD" ]; then
          echo "❌ GMAIL_APP_PASSWORD not set"
          echo "💡 Please add EMAIL_PASSWORD to GitHub Secrets"
          exit 1
        else
          echo "✅ GMAIL_APP_PASSWORD is set (length: ${#GMAIL_APP_PASSWORD})"
        fi
        
        echo "✅ Environment variables verification completed"
    
    - name: Run music news automation with AI
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        GMAIL_USER: ${{ secrets.EMAIL_ADDRESS }}
        GMAIL_APP_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.EMAIL_ADDRESS }}
        SLACK_CHANNEL_ID: C08RABUFRD0
      run: |
        echo "🎵 Starting music news automation with Claude AI..."
        echo "📅 Execution time: $(date)"
        echo "🤖 AI Summary: $([ -n "$ANTHROPIC_API_KEY" ] && echo "Enabled" || echo "Disabled")"
        
        # 프로덕션 모드로 실행
        python music_news_automation.py --production
        
        echo "✅ Music news automation completed successfully"
        echo "📅 Completion time: $(date)"
    
    - name: Verify JSON files and check AI usage
      run: |
        echo "📄 Checking generated JSON files..."
        
        if [ -f "music_news.json" ]; then
          echo "✅ music_news.json generated"
          echo "📊 File size: $(du -h music_news.json | cut -f1)"
          
          # AI 요약 사용 현황 확인
          AI_STATS=$(python -c "
          import json
          
          try:
              with open('music_news.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              news_items = data.get('news', [])
              ai_count = sum(1 for item in news_items if item.get('summary_type') == 'ai_generated')
              rule_count = sum(1 for item in news_items if item.get('summary_type') == 'rule_based')
              total_count = len(news_items)
              
              print(f'{ai_count},{rule_count},{total_count}')
              
          except Exception as e:
              print('0,0,0')
          " 2>/dev/null || echo "0,0,0")
          
          IFS=',' read -r AI_COUNT RULE_COUNT TOTAL_COUNT <<< "$AI_STATS"
          
          echo "🤖 AI 요약: $AI_COUNT 개"
          echo "📝 규칙 기반 요약: $RULE_COUNT 개"
          echo "📊 전체 뉴스: $TOTAL_COUNT 개"
          
          echo "📋 JSON Preview:"
          head -20 music_news.json
        else
          echo "❌ music_news.json not found"
          exit 1
        fi
        
        # 다른 파일들 확인 (실패해도 경고만)
        if [ -f "api_info.json" ]; then
          echo "✅ api_info.json generated"
        else
          echo "⚠️ api_info.json not found"
        fi
        
        if [ -f "README.md" ]; then
          echo "✅ README.md generated"
        else
          echo "⚠️ README.md not found"
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit and push JSON files
      run: |
        echo "📤 Committing generated files to repository..."
        
        # 변경사항 확인 (archive 폴더가 없어도 오류 없게)
        git add music_news.json api_info.json README.md
        if [ -d "archive" ]; then
          git add archive/
        fi
        
        # 변경사항이 있는지 확인
        if git diff --staged --quiet; then
          echo "📝 No changes to commit"
        else
          # 커밋 메시지에 타임스탬프 및 AI 사용 여부 포함
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          # AI 사용 현황 확인
          AI_STATUS=$(python -c "
          import json
          
          try:
              with open('music_news.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              news_items = data.get('news', [])
              ai_count = sum(1 for item in news_items if item.get('summary_type') == 'ai_generated')
              rule_count = sum(1 for item in news_items if item.get('summary_type') == 'rule_based')
              
              print(f'AI:{ai_count}, Rule:{rule_count}')
              
          except Exception:
              print('Status check failed')
          " 2>/dev/null || echo "Status unavailable")
          
          git commit -m "🎵 Update music news data with Claude AI - $TIMESTAMP

          - Generated latest music news JSON
          - Summary generation: $AI_STATUS
          - Updated API information
          - Refreshed documentation
          
          Auto-generated by GitHub Actions with Claude AI integration"
          
          # 푸시
          git push
          
          echo "✅ Successfully committed and pushed JSON files"
          echo "🌐 JSON API URL: https://raw.githubusercontent.com/${{ github.repository }}/main/music_news.json"
        fi
    
    - name: Create deployment summary
      run: |
        echo "📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎵 **Music News API Updated with Claude AI**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Generated at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **API Endpoints:**" >> $GITHUB_STEP_SUMMARY
        echo "- Latest News: \`https://raw.githubusercontent.com/${{ github.repository }}/main/music_news.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- API Info: \`https://raw.githubusercontent.com/${{ github.repository }}/main/api_info.json\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "music_news.json" ]; then
          # 통계 정보 수집
          STATS=$(python -c "
          import json
          
          try:
              with open('music_news.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              # 기본 통계
              total_news = data.get('metadata', {}).get('total_news', 0)
              news_items = data.get('news', [])
              
              # AI 요약 통계
              ai_count = sum(1 for item in news_items if item.get('summary_type') == 'ai_generated')
              rule_count = sum(1 for item in news_items if item.get('summary_type') == 'rule_based')
              total_items = len(news_items)
              
              if total_items > 0:
                  ai_percentage = (ai_count / total_items * 100)
                  ai_summary = f'{ai_count}/{total_items} ({ai_percentage:.1f}% AI)'
              else:
                  ai_summary = 'N/A'
              
              print(f'{total_news},{ai_summary}')
              
          except Exception as e:
              print('0,Error')
          " 2>/dev/null || echo "0,Error")
          
          IFS=',' read -r TOTAL_NEWS AI_SUMMARY <<< "$STATS"
          
          echo "📊 **Statistics:**" >> $GITHUB_STEP_SUMMARY
          echo "- Total News: $TOTAL_NEWS" >> $GITHUB_STEP_SUMMARY
          echo "- AI Summaries: $AI_SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "- Categories: NEWS, REPORT, INSIGHT, INTERVIEW, COLUMN" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🤖 **AI Integration:** Claude-3-Haiku (Top 10 news items)" >> $GITHUB_STEP_SUMMARY
        echo "📝 **Fallback:** Rule-based 5W1H summaries" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status:** Successfully updated" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload logs and artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: automation-logs-${{ github.run_number }}
        path: |
          *.log
          music_news.json
          api_info.json
          README.md
        retention-days: 7
        if-no-files-found: warn
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Workflow execution failed"
        echo "📅 Failed at: $(date)"
        echo "💡 Check the logs above for detailed error information"
        echo "🔧 Common solutions:"
        echo "   1. Verify GitHub Secrets are set correctly"
        echo "   2. Check ANTHROPIC_API_KEY is valid and has credits"
        echo "   3. Ensure all required files are uploaded"
        echo "   4. Verify Slack bot has proper permissions"
        echo "   5. Check Gmail app password is correct"
        echo "   6. AI errors will fallback to rule-based summaries"
