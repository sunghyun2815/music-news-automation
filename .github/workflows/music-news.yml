name: Music News Automation with JSON API

on:
  schedule:
    - cron: '0 1 * * *'  # Îß§Ïùº ÌïúÍµ≠ÏãúÍ∞Ñ Ïò§Ï†Ñ 10Ïãú (UTC Ïò§Ï†Ñ 1Ïãú)
  workflow_dispatch: # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•

jobs:
  run-music-news:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Verify required files
      run: |
        echo "üìÅ Checking required files..."
        required_files=("music_news_automation.py" "advanced_news_collector.py" "advanced_classifier.py" "news_delivery_system.py" "json_generator.py" "requirements.txt")
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file found"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        echo "‚úÖ All required files found"
    
    - name: Install dependencies
      run: |
        echo "üì¶ Installing Python packages..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Dependencies installed successfully"
    
    - name: Test Python imports
      run: |
        echo "üîç Testing Python module imports..."
        python -c "
        try:
            print('Testing advanced_news_collector...')
            from advanced_news_collector import AdvancedNewsCollector
            print('‚úÖ advanced_news_collector imported')
            
            print('Testing advanced_classifier...')
            from advanced_classifier import AdvancedClassifier
            print('‚úÖ advanced_classifier imported')
            
            print('Testing news_delivery_system...')
            from news_delivery_system import NewsDeliverySystem
            print('‚úÖ news_delivery_system imported')
            
            print('Testing json_generator...')
            from json_generator import MusicNewsJSONGenerator
            print('‚úÖ json_generator imported')
            
            print('Testing music_news_automation...')
            from music_news_automation import MusicNewsAutomationSystem
            print('‚úÖ music_news_automation imported')
            
            print('üéâ All imports successful!')
            
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "
    
    - name: Verify environment variables
      env:
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      run: |
        echo "üîê Verifying environment variables..."
        
        if [ -z "$SLACK_TOKEN" ]; then
          echo "‚ùå SLACK_TOKEN not set"
          echo "üí° Please add SLACK_TOKEN to GitHub Secrets"
          exit 1
        else
          echo "‚úÖ SLACK_TOKEN is set (length: ${#SLACK_TOKEN})"
        fi
        
        if [ -z "$EMAIL_ADDRESS" ]; then
          echo "‚ùå EMAIL_ADDRESS not set"
          echo "üí° Please add EMAIL_ADDRESS to GitHub Secrets"
          exit 1
        else
          echo "‚úÖ EMAIL_ADDRESS is set: $EMAIL_ADDRESS"
        fi
        
        if [ -z "$EMAIL_PASSWORD" ]; then
          echo "‚ùå EMAIL_PASSWORD not set"
          echo "üí° Please add EMAIL_PASSWORD to GitHub Secrets"
          exit 1
        else
          echo "‚úÖ EMAIL_PASSWORD is set (length: ${#EMAIL_PASSWORD})"
        fi
        
        echo "‚úÖ All environment variables verified"
    
    - name: Run music news automation
      env:
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      run: |
        echo "üéµ Starting music news automation system..."
        echo "üìÖ Execution time: $(date)"
        
        python music_news_automation.py --production
        
        echo "‚úÖ Music news automation completed successfully"
        echo "üìÖ Completion time: $(date)"
    
    - name: Verify JSON files generated
      run: |
        echo "üìÑ Checking generated JSON files..."
        
        if [ -f "music_news.json" ]; then
          echo "‚úÖ music_news.json generated"
          echo "üìä File size: $(du -h music_news.json | cut -f1)"
          echo "üìã Preview:"
          head -20 music_news.json
        else
          echo "‚ùå music_news.json not found"
          exit 1
        fi
        
        if [ -f "api_info.json" ]; then
          echo "‚úÖ api_info.json generated"
        else
          echo "‚ùå api_info.json not found"
          exit 1
        fi
        
        if [ -f "API_README.md" ]; then
          echo "‚úÖ API_README.md generated"
        else
          echo "‚ùå API_README.md not found"
          exit 1
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit and push JSON files
      run: |
        echo "üì§ Committing generated files to repository..."
        
        # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
        git add music_news.json api_info.json API_README.md archive/
        
        # Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        if git diff --staged --quiet; then
          echo "üìù No changes to commit"
        else
          # Ïª§Î∞ã Î©îÏãúÏßÄÏóê ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìè¨Ìï®
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          git commit -m "üéµ Update music news data - $TIMESTAMP

          - Generated latest music news JSON
          - Updated API information
          - Refreshed documentation
          
          Auto-generated by GitHub Actions"
          
          # Ìë∏Ïãú
          git push
          
          echo "‚úÖ Successfully committed and pushed JSON files"
          echo "üåê JSON API URL: https://raw.githubusercontent.com/${{ github.repository }}/main/music_news.json"
        fi
    
    - name: Create deployment summary
      run: |
        echo "üìä Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéµ **Music News API Updated**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Generated at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîó **API Endpoints:**" >> $GITHUB_STEP_SUMMARY
        echo "- Latest News: \`https://raw.githubusercontent.com/${{ github.repository }}/main/music_news.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- API Info: \`https://raw.githubusercontent.com/${{ github.repository }}/main/api_info.json\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "music_news.json" ]; then
          NEWS_COUNT=$(python -c "import json; data=json.load(open('music_news.json')); print(data['metadata']['total_news'])")
          echo "üìä **Statistics:**" >> $GITHUB_STEP_SUMMARY
          echo "- Total News: $NEWS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Categories: NEWS, REPORT, INSIGHT, INTERVIEW, COLUMN" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Status:** Successfully updated" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload logs and artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: automation-logs-${{ github.run_number }}
        path: |
          *.log
          music_news.json
          api_info.json
          API_README.md
        retention-days: 7
        if-no-files-found: warn
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Workflow execution failed"
        echo "üìÖ Failed at: $(date)"
        echo "üí° Check the logs above for detailed error information"
        echo "üîß Common solutions:"
        echo "   1. Verify GitHub Secrets are set correctly"
        echo "   2. Check if all required files are uploaded"
        echo "   3. Ensure Slack bot has proper permissions"
        echo "   4. Verify Gmail app password is correct"

